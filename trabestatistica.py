# -*- coding: utf-8 -*-
"""TrabEstatistica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18tx908jqi2vOegkSDwFAp3NdXwFatxuT

# Referência

https://docs.python.org/pt-br/3/library/statistics.html#statistics.mean

# Bibliotecas
"""

pip install numpy

pip install pandas

pip install scipy

import os
import pandas as pd
import scipy
import scipy.stats as stats
import statistics
import matplotlib.pyplot as plt
import numpy as np

from scipy.stats import norm, uniform, expon, binom, chi2
from statistics import mean
from statistics import variance

"""# Dados"""

dadosq = pd.read_csv("/content/drive/MyDrive/DadosEstatistica/data1q.dat")

dadosq

dadosx = pd.read_csv("/content/drive/MyDrive/DadosEstatistica/data1x.dat")

dadosx

dadosy = pd.read_csv("/content/drive/MyDrive/DadosEstatistica/data1y.dat")

dadosy

dadost = pd.read_csv("/content/drive/MyDrive/DadosEstatistica/data1t.dat")

dadost

"""#Questão A:

Dado que conhecemos a distribuição de probabilidades de cada variável aleatória e
os parâmetros que as caracterizam (Tabela 1), calcule a expectância e a variância
(teóricas) de cada uma delas, usando as definições que vimos em aula.

#### Dados teóricos:
"""

mediaq, varianciaq = 0, 2          #normal
ax, bx = -1, 1                     #uniforme
lamby = 0.05                       #exponencial
tentativast, probSust = 15, 0.40   #binomial

"""#### Dados Q"""

mediaq = 0
varianciaq = 2
expectanciaq = 0

"""#### Dados X"""

expectanciax = (ax + bx)/2
mediax = expectanciax
varianciax = ((bx-ax)**2)/12
varianciax

"""#### Dados Y"""

expectanciay = 1/lamby
mediay = expectanciay
varianciay = 1/(lamby**2)

"""#### Dados T"""

expectanciat = tentativast * probSust
mediat = expectanciat
varianciat = (tentativast * probSust * (1 - probSust))

"""#Questão B:

Utilize o R (ou outro programa) para ler cada arquivo e calcule estimativas para a
média e a variância do conjunto de dados (usando todos os dados disponíveis nos
arquivos). Em seguida, compare com os resultados obtidos no exercício anterior.
Faça comentários.

#### Dados Q
"""

meanq = dadosq.mean()

meanq

varianceq = dadosq.var()

varianceq

"""#### Dados X"""

meanx = dadosx.mean()

meanx

variancex = dadosx.var()

variancex

"""#### Dados Y"""

meany = dadosy.mean()

meany

variancey = dadosy.var()

variancey

"""#### Dados T"""

meant = dadost.mean()

meant

variancet = dadost.var()

variancet

"""Comparando os resultados obtidos através do cálculo computacional com os resultados obtidos através dos dados teóricos, é possível afirmar que os valores de média e variância são bastante próximos.

A pequena diferença que ocorre em algumas variáveis, como a T se dá por conta dos arredondamentos feitos em cálculos manuais e também pela construção da função utilizada nos cálculos computacionais.
"""

dados = {
    'Variáveis': ['Média Q', 'Variância Q', 'Média X', 'Variância X', 'Média Y', 'Variância Y', 'Média T', 'Variência T'],
    'Valores': [meanq, varianceq, meanx, variancex, meany, variancey, meant, variancet]
}

tabela = pd.DataFrame(dados)

tabela

"""# Questão C:

Construa os histogramas com as frequências relativas de cada uma das variáveis,
verificando se estes são condizentes com os modelos teóricos (Tabela 1).

#### Dados Q
"""

plt.hist(dadosq, bins = 20, density = True, color = 'pink', edgecolor = 'black', alpha = 0.7)

x = np.linspace(dadosq.min(), dadosq.max(), 100)
y = np.linspace(0, 0.3, 100)

pdfq = stats.norm.pdf(x, meanq, varianciaq)

plt.plot(x, pdfq, 'r-', lw=2, label="Curva Teórica - Normal")

plt.title('Frequência Relativa Q')
plt.xlabel('Valores de Q')
plt.ylabel('Frequência Relativa')
plt.legend()

"""#### Dados X"""

plt.hist(dadosx, bins = 10, density = True, color = 'pink', edgecolor = 'black', alpha = 0.7)

x = np.linspace(dadosx.min()-1, dadosx.max()+1, 100)
y = np.linspace(0, 0.8, 100)

pdfx = stats.uniform.pdf(x, loc = ax, scale=(bx - ax))

plt.plot(x, pdfx, 'r-', lw=2, label="Curva Teórica - Uniforme")

plt.title('Frequência Relativa X')
plt.xlabel('Valores de X')
plt.ylabel('Frequência Relativa')
plt.legend()

"""#### Dados Y"""

plt.hist(dadosy, bins = 15, density = True, color = 'pink', edgecolor = 'black', alpha = 0.7)

x = np.linspace(dadosy.min()-1, dadosy.max(), 50)
y = np.linspace(0, 0.1, 10)

pdfy = expon.pdf(x, scale=1/lamby)

plt.plot(x, pdfy, 'r-', lw=2, label="Curva Teórica - Exponencial")

plt.title('Frequência Relativa Y')
plt.xlabel('Valores de Y')
plt.ylabel('Frequência Relativa')
plt.legend()

"""#### Dados T"""

plt.hist(dadost, bins = tentativast, density = True, color = 'pink', edgecolor = 'black', alpha = 0.7)

#x = np.linspace(dadost.min(), dadost.max(), 50) -> não funciona bem
x = np.arange(0, tentativast + 1)
y = np.linspace(-1, 1, 1)

pdft = binom.pmf(x, tentativast, probSust)

plt.plot(x+0.5, pdft, color='red', lw=2, marker='o', label="Curva Teórica - Binomial")

plt.title('Frequência Relativa T')
plt.xlabel('Valores de T')
plt.ylabel('Frequência Relativa')
plt.legend()

"""# Questão D:

Considere cada uma das amostras das variáveis aleatórias, contidas nos arquivos,
e suas diferentes distribuições de probabilidades. Tome amostras aleatórias de
tamanho n (n = 5, 10 e 50) de cada uma das variáveis aleatórias e construa as
variáveis aleatórias (estatísticas):

onde W = Q, X, Y ou T. Use 10000 amostras simples (pontos amostrais) para gerar
as variáveis aleatórias média amostral e variância amostral. Obs.: Lembre-se das
características que as amostras aleatórias devem ter. Apresente o código.

Referência: https://cursos.alura.com.br/forum/topico-metodo-var-117002

#### Dados Q

##### AMOSTRA 5
"""

dadosq.shape

dadosq

mediaq5 = []
varianciaq5 = []

#for i in range(10000):
amostraq5 = np.random.choice(dadosq.values.flatten(), size = (10000,5), replace=False)
  #amostraq5.append(amostrasq5)
mediaq5.append(np.mean(amostraq5, axis = 1))
varianciaq5.append(np.var(amostraq5, ddof=1, axis = 1))
  #i += 1

print(mediaq5, varianciaq5)

"""##### AMOSTRA 10"""

mediaq10 = []
varianciaq10 = []

#for i in range(10000):
amostraq10 = np.random.choice(dadosq.values.flatten(), size= (10000,10), replace=False)
  #amostraq10.append(amostrasq5)
mediaq10.append(np.mean(amostraq10, axis = 1))
varianciaq10.append(np.var(amostraq10, ddof=1, axis = 1))
  #i += 1

"""##### AMOSTRA 50"""

mediaq50 = []
varianciaq50 = []

#for _ in range(5000):
amostraq50 = np.random.choice(dadosq.values.flatten(), size=(10000,50), replace=False)
  #amostraq10.append(amostrasq5)
mediaq50.append(np.mean(amostraq50, axis = 1))
varianciaq50.append(np.var(amostraq50, ddof=1, axis = 1))

"""#### Dados X

##### AMOSTRA 5
"""

mediax5 = []
varianciax5 = []
amostrax5 = []

#for _ in range(10000):
amostrax5 = np.random.choice(dadosx.values.flatten(), size=(10000,5), replace=False)
  #amostrax5.append(amostrasx5)
mediax5.append(np.mean(amostrax5, axis = 1))
varianciax5.append(np.var(amostrax5, ddof=1, axis = 1))

"""##### AMOSTRA 10"""

mediax10 = []
varianciax10 = []

#for _ in range(10000):
amostrax10 = np.random.choice(dadosx.values.flatten(), size=(10000,10), replace=False)
  #amostraq10.append(amostrasq5)
mediax10.append(np.mean(amostrax10, axis = 1))
varianciax10.append(np.var(amostrax10, ddof=1, axis = 1))

"""##### AMOSTRA 50"""

mediax50 = []
varianciax50 = []

#for _ in range(10000):
amostrax50 = np.random.choice(dadosx.values.flatten(), size=(10000,50), replace=False)
  #amostraq10.append(amostrasq5)
mediax50.append(np.mean(amostraq50, axis = 1))
varianciax50.append(np.var(amostrax50, ddof=1, axis = 1))

"""#### Dados Y

##### AMOSTRA 5
"""

mediay5 = []
varianciay5 = []
amostray5 = []

#for _ in range(10000):
amostray5 = np.random.choice(dadosy.values.flatten(), size=(10000,5), replace=False)
  #amostray5.append(amostrasy5)
mediay5.append(np.mean(amostray5, axis = 1))
varianciay5.append(np.var(amostray5, ddof=1, axis = 1))

"""##### AMOSTRA 10"""

mediay10 = []
varianciay10 = []

#for _ in range(10000):
amostray10 = np.random.choice(dadosy.values.flatten(), size=(10000,10), replace=False)
  #amostraq10.append(amostrasq5)
mediay10.append(np.mean(amostray10, axis = 1))
varianciay10.append(np.var(amostray10, ddof=1, axis = 1))

"""##### AMOSTRA 50"""

mediay50 = []
varianciay50 = []

#for _ in range(10000):
amostray50 = np.random.choice(dadosy.values.flatten(), size=(10000,50), replace=False)
  #amostraq10.append(amostrasq5)
mediay50.append(np.mean(amostray50, axis = 1))
varianciay50.append(np.var(amostray50, ddof=1, axis = 1))

"""#### Dados T

##### AMOSTRA 5
"""

mediat5 = []
varianciat5 = []

#for _ in range(10000):
amostrat5 = np.random.choice(dadost.values.flatten(), size=(10000,5), replace=False)
  #amostrat5.append(amostrast5)
mediat5.append(np.mean(amostrat5, axis = 1))
varianciat5.append(np.var(amostrat5, ddof=1, axis = 1))

"""##### AMOSTRA 10"""

mediat10 = []
varianciat10 = []

#for _ in range(10000):
amostrat10 = np.random.choice(dadost.values.flatten(), size=(10000,10), replace=False)
  #amostraq10.append(amostrasq5)
mediat10.append(np.mean(amostrat10, axis = 1))
varianciat10.append(np.var(amostrat10, ddof=1, axis = 1))

"""##### AMOSTRA 50"""

mediat50 = []
varianciat50 = []

#for _ in range(10000):
amostrat50 = np.random.choice(dadost.values.flatten(), size=(10000,50), replace=False)
  #amostraq10.append(amostrasq5)
mediat50.append(np.mean(amostrat50, axis = 1))
varianciat50.append(np.var(amostrat50, ddof=1, axis = 1))

"""#Questão E:

Usando o código da questão anterior, construa os histogramas de frequências das variáveis aleatórias média amostral e variância amostral, para os diferentes valores de n e compare com as distribuições teóricas esperadas para estas variáveis. Faça isso para as variáveis (Q, X, Y e T).

####Dados Q
"""

n = 5
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediaq5, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciaq) / np.sqrt(n)
x = np.linspace(-3, 3, 100)
plt.plot(x, norm.pdf(x, loc=mediaq, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciaq5, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 12, 100)
plt.plot(x, chi2.pdf(x * df / varianciaq, df) * df / varianciaq, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 10
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediaq10, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciaq) / np.sqrt(n)
x = np.linspace(-3, 3, 100)
plt.plot(x, norm.pdf(x, loc=mediaq, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciaq10, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 12, 100)
plt.plot(x, chi2.pdf(x * df / varianciaq, df) * df / varianciaq, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 50
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediaq50, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciaq) / np.sqrt(n)
x = np.linspace(-3, 3, 100)
plt.plot(x, norm.pdf(x, loc=mediaq, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciaq50, bins=30, color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 12, 100)
plt.plot(x, chi2.pdf(x * df / varianciaq, df) * df / varianciaq, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

"""#### Dados X"""

n = 5
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediax5, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciax) / np.sqrt(n)
x = np.linspace(-1, 1, 100)
plt.plot(x, norm.pdf(x, loc=mediax, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciax5, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 5, 100)
plt.plot(x, chi2.pdf(x * df / varianciax, df) * df / varianciax, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 10
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediax10, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciax) / np.sqrt(n)
x = np.linspace(-1, 1, 100)
plt.plot(x, norm.pdf(x, loc=mediax, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciax10, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 5, 100)
plt.plot(x, chi2.pdf(x * df / varianciax, df) * df / varianciax, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 50
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediax50, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciax) / np.sqrt(n)
x = np.linspace(-1, 1, 100)
plt.plot(x, norm.pdf(x, loc=mediax, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciax50, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 5, 100)
plt.plot(x, chi2.pdf(x * df / varianciax, df) * df / varianciax, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

"""#### Dados Y"""

n = 5
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediay5, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciay) / np.sqrt(n)
x = np.linspace(-1, 70, 100)
plt.plot(x, norm.pdf(x, loc=20, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciay5, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 4000, 100)
plt.plot(x, chi2.pdf(x * df / varianciay, df) * df / varianciay, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 10
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediay10, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciay) / np.sqrt(n)
x = np.linspace(-1, 70, 100)
plt.plot(x, norm.pdf(x, loc=20, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciay10, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 4000, 100)
plt.plot(x, chi2.pdf(x * df / varianciay, df) * df / varianciay, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 50
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediay50, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciay) / np.sqrt(n)
x = np.linspace(-1, 70, 100)
plt.plot(x, norm.pdf(x, loc=20, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciay50, bins="auto", color = 'pink', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 4000, 100)
plt.plot(x, chi2.pdf(x * df / varianciay, df) * df / varianciay, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

"""#### Dados T"""

n = 5
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediat5, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciat) / np.sqrt(n)
x = np.linspace(0, 12, 100)
plt.plot(x, norm.pdf(x, loc=6, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciat5, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 20, 100)
plt.plot(x, chi2.pdf(x * df / varianciat, df) * df / varianciat, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 10
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediat10, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciat) / np.sqrt(n)
x = np.linspace(0, 12, 100)
plt.plot(x, norm.pdf(x, loc=6, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciat10, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 15, 100)
plt.plot(x, chi2.pdf(x * df / varianciat, df) * df / varianciat, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

n = 50
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.hist(mediat50, bins='auto', color= 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Médias amostrais")
desvio_teorico = np.sqrt(varianciat) / np.sqrt(n)
x = np.linspace(4, 8, 100)
plt.plot(x, norm.pdf(x, loc=6, scale=desvio_teorico), 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Média Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.subplot(1, 2, 2)
plt.hist(varianciat50, bins="auto", color = 'pink', edgecolor = 'black', density=True, alpha=0.7, label="Variâncias amostrais")
df = n - 1
x = np.linspace(0, 8, 100)
plt.plot(x, chi2.pdf(x * df / varianciat, df) * df / varianciat, 'r-', lw=2, label="Distribuição Teórica")
plt.title(f"Variância Amostral (n={n})")
plt.xlabel("Valor")
plt.ylabel("Frequência")
plt.legend()

plt.tight_layout()
plt.show()

"""# Questão F:

 Compare os histogramas, para os diferentes valores de n, e discuta os resultados

A partir da análise e comparação dos histogramas, é possível inferir que, quanto maior o número de amostras (n), mais a distribuição dos valores da média se aproxima da distribuição normal. Assim, apesar de as variáveis X, Y e T serem originalmente uniforme, exponencial e binomial, respectivamente, quanto maior o número de amostras, mais seus histogramas aproximam-se de uma normal, indo de encontro ao Teorema do Limite Central.
"""